{"version":3,"file":"index.native.modern.mjs","sources":["../src/native/index.ts"],"sourcesContent":["import {\n  ComponentType,\n  Context as ContextOrig,\n  FC,\n  MutableRefObject,\n  Provider,\n  createElement,\n  createContext as createContextOrig,\n  useContext as useContextOrig,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { batchedUpdates } from './batchedUpdates';\n\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\n\nconst isSSR = typeof window === 'undefined'\n  || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\n\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = runWithPriority\n  ? (thunk: () => void) => runWithPriority(NormalPriority, thunk)\n  : (thunk: () => void) => thunk();\n\ntype Version = number;\n\ntype ContextValue<Value> = {\n  [CONTEXT_VALUE]: {\n    /* \"v\"alue     */ v: MutableRefObject<Value>;\n    /* versio\"n\"   */ n: MutableRefObject<Version>;\n    /* \"l\"isteners */ l: Set<(action: readonly [Version] | readonly [Version, Value]) => void>;\n    /* \"u\"pdate    */ u: (thunk: () => void) => void;\n  };\n};\n\nexport interface Context<Value> {\n  Provider: ComponentType<{ value: Value }>;\n  displayName?: string;\n}\n\nconst createProvider = <Value>(\n  ProviderOrig: Provider<ContextValue<Value>>,\n): FC<{ value: Value }> => ({ value, children }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const contextValue = useRef<ContextValue<Value>>();\n    if (!contextValue.current) {\n      const listeners = new Set<(action: readonly [Version] | readonly [Version, Value]) => void>();\n      const update = (thunk: () => void) => {\n        batchedUpdates(() => {\n          versionRef.current += 1;\n          listeners.forEach((listener) => listener([versionRef.current]));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */ v: valueRef,\n          /* versio\"n\"   */ n: versionRef,\n          /* \"l\"isteners */ l: listeners,\n          /* \"u\"pdate    */ u: update,\n        },\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        (contextValue.current as ContextValue<Value>)[CONTEXT_VALUE].l.forEach((listener) => {\n          listener([versionRef.current, value]);\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, { value: contextValue.current }, children);\n  };\n\nconst identity = <T>(x: T) => x;\n\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport function createContext<Value>(defaultValue: Value) {\n  const context = createContextOrig<ContextValue<Value>>({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */ v: { current: defaultValue },\n      /* versio\"n\"   */ n: { current: -1 },\n      /* \"l\"isteners */ l: new Set(),\n      /* \"u\"pdate    */ u: (f) => f(),\n    },\n  });\n  (context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<ContextValue<Value>>;\n  })[ORIGINAL_PROVIDER] = context.Provider;\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\n  delete (context as any).Consumer; // no support for Consumer\n  return context as unknown as Context<Value>;\n}\n\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport function useContextSelector<Value, Selected>(\n  context: Context<Value>,\n  selector: (value: Value) => Selected,\n) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */ v: { current: value },\n    /* versio\"n\"   */ n: { current: version },\n    /* \"l\"isteners */ l: listeners,\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((\n    prev: readonly [Value, Selected],\n    next?: // undefined from render below\n      | readonly [Version] // from useContextUpdate\n      | readonly [Version, Value], // from provider effect\n  ) => {\n    if (!next) {\n      return [value, selected] as const;\n    }\n    if (next[0] === version) {\n      if (Object.is(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected] as const;\n    }\n    try {\n      if (next.length === 2) {\n        if (Object.is(prev[0], next[1])) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(next[1]);\n        if (Object.is(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [next[1], nextSelected] as const;\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev] as const; // schedule update\n  }, [value, selected] as const);\n  if (!Object.is(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nexport function useContext<Value>(context: Context<Value>) {\n  return useContextSelector(context, identity);\n}\n\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * [Concurrent Mode](https://reactjs.org/docs/concurrent-mode-intro.html).\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n * update(() => setState(...));\n */\nexport function useContextUpdate<Value>(context: Context<Value>) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const { u: update } = contextValue;\n  return update;\n}\n\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nexport const BridgeProvider: FC<{\n  context: Context<any>;\n  value: any;\n}> = ({ context, value, children }) => {\n  const { [ORIGINAL_PROVIDER]: ProviderOrig } = context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<unknown>;\n  };\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, { value }, children);\n};\n\n/**\n * This hook return a value for BridgeProvider\n */\nexport const useBridgeValue = (context: Context<any>) => {\n  const bridgeValue = useContextOrig(context as unknown as ContextOrig<ContextValue<unknown>>);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue as any;\n};\n"],"names":["CONTEXT_VALUE","Symbol","ORIGINAL_PROVIDER","useIsomorphicLayoutEffect","window","test","navigator","userAgent","useEffect","useLayoutEffect","runWithNormalPriority","runWithPriority","thunk","NormalPriority","identity","x","createContext","defaultValue","context","createContextOrig","v","current","n","l","Set","u","f","ProviderOrig","Provider","value","children","valueRef","useRef","versionRef","contextValue","listeners","update","batchedUpdates","forEach","listener","createElement","Consumer","useContextSelector","selector","useContextOrig","process","env","NODE_ENV","Error","version","selected","state","dispatch","useReducer","prev","next","Object","is","length","nextSelected","e","add","delete","useContext","useContextUpdate","BridgeProvider","useBridgeValue","bridgeValue"],"mappings":"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"}