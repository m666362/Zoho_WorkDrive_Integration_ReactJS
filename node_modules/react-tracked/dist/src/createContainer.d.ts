import { FC } from 'react';
declare type AnyFunction = (...args: any[]) => any;
declare type Options = {
    stateContextName?: string;
    updateContextName?: string;
    concurrentMode?: boolean;
};
export declare const createContainer: <State, Update extends AnyFunction, Props>(useValue: (props: Props) => readonly [State, Update], options?: boolean | Options | undefined) => {
    readonly Provider: FC<Props>;
    readonly useTrackedState: () => State;
    readonly useTracked: () => [State, Update | ((...args: Parameters<Update>) => ReturnType<Update>)];
    readonly useUpdate: (() => (...args: Parameters<Update>) => ReturnType<Update>) | (() => Update);
    readonly useSelector: <Selected>(selector: (state: State) => Selected) => Selected;
};
export {};
