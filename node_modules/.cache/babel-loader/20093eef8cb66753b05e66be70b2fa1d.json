{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport React, { useEffect, useState } from \"react\";\nimport useTrackedStore from \"../../store/useTrackedStore\";\nimport * as ApiCall from \"./api/ApiCalling\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SettingResponse(props) {\n  _s();\n\n  const {\n    rootFolderId,\n    userAccessToken,\n    name,\n    settingId\n  } = props;\n  const state = useTrackedStore();\n  const [post, setPost] = useState;\n  const [searchVal, setSearchVal] = useState(\"\");\n  useEffect(() => {\n    console.log({\n      rootFolderId,\n      userAccessToken,\n      name,\n      settingId\n    });\n  }); //   async function handleClick(file) {\n  //     console.log({\n  //       file: file?.id,\n  //       hit: state?.settingData?.[settingId]?.previousData?.hasOwnProperty(\n  //         file?.id\n  //       ),\n  //       previous: state?.settingData?.[settingId]?.previousData,\n  //     });\n  //     if (\n  //       state?.settingData?.[settingId]?.previousData?.hasOwnProperty(file?.id)\n  //     ) {\n  //       console.log({ handleClickIdFound: \"id found handleClick\", file });\n  //       setSearchVal(\"\");\n  //       setPost(state?.settingData?.[settingId]?.previousData?.[file?.id]);\n  //       state?.setApiSettingData(\n  //         settingId,\n  //         file,\n  //         state?.settingData?.[settingId]?.previousData?.[file?.id]\n  //       );\n  //     } else {\n  //       try {\n  //         console.log({ handleClickNotFound: \"id not  found handleClick\", file });\n  //         let res = await ApiCall.getFoldersItem(userAccessToken, file?.id);\n  //         await state?.setApiSettingData(settingId, file, res.data);\n  //         setPost(res.data);\n  //         setSearchVal(\"\");\n  //       } catch (error) {\n  //         console.log({ error });\n  //       }\n  //     }\n  //   }\n  //   useEffect(async () => {\n  //     setSearchVal(\"\");\n  //     if (\n  //       !state?.settingData?.[settingId]?.previousData?.hasOwnProperty(\n  //         rootFolderId\n  //       )\n  //     ) {\n  //       let res = await ApiCall.getFoldersItem(userAccessToken, rootFolderId);\n  //       try {\n  //         setPost(res.data);\n  //         state?.setApiSettingData(settingId, rootFolderId, res.data);\n  //         state?.setLoading(false);\n  //       } catch (error) {\n  //         console.log({ error });\n  //       }\n  //     } else {\n  //       let lastIndex = state?.settingData?.[settingId]?.breadCrumbs?.length - 1;\n  //       let lastIndexId =\n  //         state?.settingData?.[settingId]?.breadCrumbs?.[lastIndex].id;\n  //       console.log({\n  //         lastData: state?.settingData?.[settingId]?.previousData?.[lastIndexId],\n  //       });\n  //       setPost(state?.settingData?.[settingId]?.previousData?.[lastIndexId]);\n  //     }\n  //   }, [userAccessToken, rootFolderId, settingId]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: JSON.stringify(post !== null && post !== void 0 ? post : [])\n  }, void 0, false);\n}\n\n_s(SettingResponse, \"onuNuKmNjPQZhiku03IAlYpsWEk=\", false, function () {\n  return [useTrackedStore];\n});\n\n_c = SettingResponse;\nexport default SettingResponse;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingResponse\");","map":{"version":3,"sources":["D:/Rayhan/Unique Project/zoho_api_axios(1)/src/components/Playground/SettingResponse.js"],"names":["Backdrop","CircularProgress","React","useEffect","useState","useTrackedStore","ApiCall","SettingResponse","props","rootFolderId","userAccessToken","name","settingId","state","post","setPost","searchVal","setSearchVal","console","log","JSON","stringify"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,wBAArB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAE9B,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA,IAAjC;AAAuCC,IAAAA;AAAvC,MAAoDJ,KAA1D;AACA,QAAMK,KAAK,GAAGR,eAAe,EAA7B;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBX,QAAxB;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEFD,EAAAA,SAAS,CAAC,MAAI;AACVe,IAAAA,OAAO,CAACC,GAAR,CAAY;AACRV,MAAAA,YADQ;AACMC,MAAAA,eADN;AACuBC,MAAAA,IADvB;AAC6BC,MAAAA;AAD7B,KAAZ;AAGH,GAJQ,CAAT,CAPgC,CAahC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAA,cACGQ,IAAI,CAACC,SAAL,CAAeP,IAAf,aAAeA,IAAf,cAAeA,IAAf,GAAuB,EAAvB;AADH,mBADF;AAgBD;;GAxFQP,e;UAGOF,e;;;KAHPE,e;AA0FT,eAAeA,eAAf","sourcesContent":["import Backdrop from \"@mui/material/Backdrop\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport useTrackedStore from \"../../store/useTrackedStore\";\r\nimport * as ApiCall from \"./api/ApiCalling\";\r\n\r\nfunction SettingResponse(props) {\r\n    \r\n  const { rootFolderId, userAccessToken, name, settingId} = props;\r\n  const state = useTrackedStore();\r\n  const [post, setPost] = useState;\r\n  const [searchVal, setSearchVal] = useState(\"\");\r\n\r\nuseEffect(()=>{\r\n    console.log({\r\n        rootFolderId, userAccessToken, name, settingId\r\n    });\r\n})\r\n\r\n//   async function handleClick(file) {\r\n//     console.log({\r\n//       file: file?.id,\r\n//       hit: state?.settingData?.[settingId]?.previousData?.hasOwnProperty(\r\n//         file?.id\r\n//       ),\r\n//       previous: state?.settingData?.[settingId]?.previousData,\r\n//     });\r\n//     if (\r\n//       state?.settingData?.[settingId]?.previousData?.hasOwnProperty(file?.id)\r\n//     ) {\r\n//       console.log({ handleClickIdFound: \"id found handleClick\", file });\r\n//       setSearchVal(\"\");\r\n//       setPost(state?.settingData?.[settingId]?.previousData?.[file?.id]);\r\n//       state?.setApiSettingData(\r\n//         settingId,\r\n//         file,\r\n//         state?.settingData?.[settingId]?.previousData?.[file?.id]\r\n//       );\r\n//     } else {\r\n//       try {\r\n//         console.log({ handleClickNotFound: \"id not  found handleClick\", file });\r\n//         let res = await ApiCall.getFoldersItem(userAccessToken, file?.id);\r\n\r\n//         await state?.setApiSettingData(settingId, file, res.data);\r\n//         setPost(res.data);\r\n//         setSearchVal(\"\");\r\n//       } catch (error) {\r\n//         console.log({ error });\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   useEffect(async () => {\r\n//     setSearchVal(\"\");\r\n//     if (\r\n//       !state?.settingData?.[settingId]?.previousData?.hasOwnProperty(\r\n//         rootFolderId\r\n//       )\r\n//     ) {\r\n//       let res = await ApiCall.getFoldersItem(userAccessToken, rootFolderId);\r\n//       try {\r\n//         setPost(res.data);\r\n//         state?.setApiSettingData(settingId, rootFolderId, res.data);\r\n//         state?.setLoading(false);\r\n//       } catch (error) {\r\n//         console.log({ error });\r\n//       }\r\n//     } else {\r\n//       let lastIndex = state?.settingData?.[settingId]?.breadCrumbs?.length - 1;\r\n//       let lastIndexId =\r\n//         state?.settingData?.[settingId]?.breadCrumbs?.[lastIndex].id;\r\n//       console.log({\r\n//         lastData: state?.settingData?.[settingId]?.previousData?.[lastIndexId],\r\n//       });\r\n//       setPost(state?.settingData?.[settingId]?.previousData?.[lastIndexId]);\r\n//     }\r\n//   }, [userAccessToken, rootFolderId, settingId]);\r\n\r\n  return (\r\n    <>\r\n      {JSON.stringify(post ?? [])}\r\n      {/* <Response\r\n        rootFolderId={rootFolderId}\r\n        userAccessToken={userAccessToken}\r\n        name={name}\r\n        settingId={settingId}\r\n        post={post}\r\n        setPost={setPost}\r\n        searchVal={searchVal}\r\n        setSearchVal={setSearchVal}\r\n        handleClick={handleClick}\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingResponse;\r\n"]},"metadata":{},"sourceType":"module"}