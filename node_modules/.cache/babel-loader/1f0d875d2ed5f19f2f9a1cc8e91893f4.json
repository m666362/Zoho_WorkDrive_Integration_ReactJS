{"ast":null,"code":"import { produce, setAutoFreeze } from \"immer\";\nimport create from \"zustand\";\nimport { createTrackedSelector } from \"react-tracked\";\nimport axios from \"axios\";\nimport { Menuitems } from \"../data/data.js\";\nsetAutoFreeze(false);\nexport const immer = config => (set, get) => config(fn => set(produce(fn)), get);\n\nconst log = config => (set, get, api) => config(args => {\n  set(args);\n}, get, api);\n\nconst store = set => ({\n  menuItems: Menuitems,\n  menuClicked: \"Dashboard\",\n  setMenuClicked: menuClicked => set(state => {\n    state.menuClicked = menuClicked;\n  }),\n  subMenuClicked: \"\",\n  setSubMenuClicked: subMenuClicked => set(state => {\n    state.subMenuClicked = subMenuClicked;\n  }),\n  bread: [{\n    name: \"My Folder\",\n    id: \"igmch451bbcad1ac04521b63eb9609ab84b0f\"\n  }],\n  setRootBread: id => set(state => {\n    state.bread;\n  }),\n  setBreadCrumbs: folder => set(state => {\n    state.bread = [].concat(state.bread, [{\n      name: folder === null || folder === void 0 ? void 0 : folder.attributes.name,\n      id: folder === null || folder === void 0 ? void 0 : folder.id\n    }]);\n  }),\n  setBreadCrumbsUrl: folder => set(state => {\n    let my_array = [];\n\n    for (let index = 0; index < state.bread.length; index++) {\n      const element = state.bread[index];\n      if (element.id != folder.id) my_array.push(element);else {\n        my_array.push(element);\n        break;\n      }\n    }\n\n    state.bread = my_array;\n  }),\n  listView: true,\n  setListView: bool => set(state => {\n    state.listView = bool;\n  }),\n  apiData: {},\n  setApiData: (folderId, data) => set(state => {\n    state.apiData[folderId] = data;\n  }),\n  loading: true,\n  setLoading: bool => set(state => {\n    state.loading = bool;\n  }),\n  id: \"\",\n  setId: id => set(state => {\n    state.id = id;\n  }),\n  token: \"\",\n  setToken: data => set(state => {\n    state.token = data;\n  }),\n  pasteChildId: \"\",\n  setPasteChildId: id => set(state => {\n    console.log(id);\n    state.pasteChildId = id;\n    console.log({\n      id: state.pasteChildId\n    });\n  })\n});\n\nconst useStore = create(log(immer(store)));\nconst useTrackedStore = createTrackedSelector(useStore);\nexport default useTrackedStore;","map":{"version":3,"sources":["D:/Rayhan/Unique Project/zoho_api_axios(1)/src/store/useTrackedStore.js"],"names":["produce","setAutoFreeze","create","createTrackedSelector","axios","Menuitems","immer","config","set","get","fn","log","api","args","store","menuItems","menuClicked","setMenuClicked","state","subMenuClicked","setSubMenuClicked","bread","name","id","setRootBread","setBreadCrumbs","folder","concat","attributes","setBreadCrumbsUrl","my_array","index","length","element","push","listView","setListView","bool","apiData","setApiData","folderId","data","loading","setLoading","setId","token","setToken","pasteChildId","setPasteChildId","console","useStore","useTrackedStore"],"mappings":"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","sourcesContent":["import { produce, setAutoFreeze } from \"immer\";\r\nimport create from \"zustand\";\r\nimport { createTrackedSelector } from \"react-tracked\";\r\nimport axios from \"axios\";\r\nimport { Menuitems } from \"../data/data.js\";\r\n\r\nsetAutoFreeze(false);\r\n\r\nexport const immer = (config) => (set, get) =>\r\n  config((fn) => set(produce(fn)), get);\r\n\r\nconst log = (config) => (set, get, api) =>\r\n  config(\r\n    (args) => {\r\n      set(args);\r\n    },\r\n    get,\r\n    api\r\n  );\r\n\r\nconst store = (set) => ({\r\n  menuItems: Menuitems,\r\n  menuClicked: \"Dashboard\",\r\n  setMenuClicked: (menuClicked) =>\r\n    set((state) => {\r\n      state.menuClicked = menuClicked;\r\n    }),\r\n  subMenuClicked: \"\",\r\n  setSubMenuClicked: (subMenuClicked) =>\r\n    set((state) => {\r\n      state.subMenuClicked = subMenuClicked;\r\n    }),\r\n  bread: [{ name: \"My Folder\", id: \"igmch451bbcad1ac04521b63eb9609ab84b0f\" }],\r\n  setRootBread: (id)=> set((state)=>{\r\n    state.bread\r\n  }),\r\n  setBreadCrumbs: (folder) =>\r\n    set((state) => {\r\n      state.bread = [].concat(state.bread, [\r\n        { name: folder?.attributes.name, id: folder?.id },\r\n      ]);\r\n    }),\r\n  setBreadCrumbsUrl: (folder) =>\r\n    set((state) => {\r\n      let my_array = [];\r\n      for (let index = 0; index < state.bread.length; index++) {\r\n        const element = state.bread[index];\r\n        if (element.id != folder.id) my_array.push(element);\r\n        else {\r\n          my_array.push(element);\r\n          break;\r\n        }\r\n      }\r\n      state.bread = my_array;\r\n    }),\r\n  listView: true,\r\n  setListView: (bool) =>\r\n    set((state) => {\r\n      state.listView = bool;\r\n    }),\r\n  apiData: {},\r\n  setApiData: (folderId, data) =>\r\n    set((state) => {\r\n      state.apiData[folderId] = data;\r\n    }),\r\n  loading: true,\r\n  setLoading: (bool) =>\r\n    set((state) => {\r\n      state.loading = bool;\r\n    }),\r\n  id: \"\",\r\n  setId: (id) =>\r\n    set((state) => {\r\n      state.id = id;\r\n    }),\r\n  token: \"\",\r\n  setToken: (data) =>\r\n    set((state) => {\r\n      state.token = data;\r\n    }),\r\n  pasteChildId: \"\",\r\n  setPasteChildId: (id) =>\r\n    set((state) => {\r\n      console.log(id);\r\n      state.pasteChildId = id;\r\n      console.log({ id: state.pasteChildId });\r\n    }),\r\n});\r\n\r\nconst useStore = create(log(immer(store)));\r\nconst useTrackedStore = createTrackedSelector(useStore);\r\nexport default useTrackedStore;\r\n"]},"metadata":{},"sourceType":"module"}