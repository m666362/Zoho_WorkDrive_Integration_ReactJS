{"ast":null,"code":"import { produce, setAutoFreeze } from \"immer\";\nimport create from \"zustand\";\nimport { createTrackedSelector } from \"react-tracked\";\nimport { Menuitems } from \"../data/data.js\";\nsetAutoFreeze(false);\nexport const immer = config => (set, get) => config(fn => set(produce(fn)), get);\n\nconst log = config => (set, get, api) => config(args => {\n  set(args);\n}, get, api);\n\nconst store = set => ({\n  menuItems: Menuitems,\n  menuClicked: \"Dashboard\",\n  setMenuClicked: menuClicked => set(state => {\n    state.menuClicked = menuClicked;\n  }),\n  subMenuClicked: \"\",\n  setSubMenuClicked: subMenuClicked => set(state => {\n    state.subMenuClicked = subMenuClicked;\n  }),\n  bread: [{\n    name: \"My Folder\",\n    id: \"0fx6ef888f9bfcdb040bd9084653db3c65a8c\"\n  }],\n  setRootBread: id => set(state => {\n    state.bread = [{\n      name: \"Base Directory\",\n      id: id\n    }];\n  }),\n  setBreadCrumbs: folder => set(state => {\n    var _folder$attributes;\n\n    state.bread = [].concat(state.bread, [{\n      name: folder === null || folder === void 0 ? void 0 : (_folder$attributes = folder.attributes) === null || _folder$attributes === void 0 ? void 0 : _folder$attributes.name,\n      id: folder === null || folder === void 0 ? void 0 : folder.id\n    }]);\n  }),\n  setBreadCrumbsUrl: folder => set(state => {\n    let my_array = [];\n\n    for (let index = 0; index < state.bread.length; index++) {\n      const element = state.bread[index];\n      if (element.id != folder.id) my_array.push(element);else {\n        my_array.push(element);\n        break;\n      }\n    }\n\n    state.bread = my_array;\n  }),\n  listView: true,\n  setListView: bool => set(state => {\n    state.listView = bool;\n  }),\n  apiData: {},\n  setApiData: (folderId, data) => set(state => {\n    state.apiData[folderId] = data;\n  }),\n  loading: true,\n  setLoading: bool => set(state => {\n    state.loading = bool;\n  }),\n  id: \"\",\n  setId: id => set(state => {\n    state.id = id;\n  }),\n  token: \"\",\n  setToken: data => set(state => {\n    state.token = data;\n  }),\n  userToken: \"\",\n  setUserToken: data => set(state => {\n    state.userToken = `Bearer ${data}`;\n  }),\n  settingData: {},\n  setInitializeData: settings => set(state => {\n    settings.map();\n  }),\n  setBreadCrumbsSettingData: (rootFolderId, folder) => set(state => {\n    var _state$settingData, _state$settingData2, _state$settingData2$r, _folder$attributes2;\n\n    state.settingData = { ...state.settingData,\n      rootFolderId: { ...((_state$settingData = state.settingData) === null || _state$settingData === void 0 ? void 0 : _state$settingData[rootFolderId]),\n        breadCrumbs: [].concat((_state$settingData2 = state.settingData) === null || _state$settingData2 === void 0 ? void 0 : (_state$settingData2$r = _state$settingData2[rootFolderId]) === null || _state$settingData2$r === void 0 ? void 0 : _state$settingData2$r.breadCrumbs, [{\n          name: folder === null || folder === void 0 ? void 0 : (_folder$attributes2 = folder.attributes) === null || _folder$attributes2 === void 0 ? void 0 : _folder$attributes2.name,\n          id: folder === null || folder === void 0 ? void 0 : folder.id\n        }])\n      }\n    };\n  })\n});\n\nconst useStore = create(log(immer(store)));\nconst useTrackedStore = createTrackedSelector(useStore);\nexport default useTrackedStore;","map":{"version":3,"sources":["D:/Rayhan/Unique Project/zoho_api_axios(1)/src/store/useTrackedStore.js"],"names":["produce","setAutoFreeze","create","createTrackedSelector","Menuitems","immer","config","set","get","fn","log","api","args","store","menuItems","menuClicked","setMenuClicked","state","subMenuClicked","setSubMenuClicked","bread","name","id","setRootBread","setBreadCrumbs","folder","concat","attributes","setBreadCrumbsUrl","my_array","index","length","element","push","listView","setListView","bool","apiData","setApiData","folderId","data","loading","setLoading","setId","token","setToken","userToken","setUserToken","settingData","setInitializeData","settings","map","setBreadCrumbsSettingData","rootFolderId","breadCrumbs","useStore","useTrackedStore"],"mappings":"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","sourcesContent":["import { produce, setAutoFreeze } from \"immer\";\r\nimport create from \"zustand\";\r\nimport { createTrackedSelector } from \"react-tracked\";\r\nimport { Menuitems } from \"../data/data.js\";\r\n\r\nsetAutoFreeze(false);\r\n\r\nexport const immer = (config) => (set, get) =>\r\n  config((fn) => set(produce(fn)), get);\r\n\r\nconst log = (config) => (set, get, api) =>\r\n  config(\r\n    (args) => {\r\n      set(args);\r\n    },\r\n    get,\r\n    api\r\n  );\r\n\r\nconst store = (set) => ({\r\n  menuItems: Menuitems,\r\n  menuClicked: \"Dashboard\",\r\n  setMenuClicked: (menuClicked) =>\r\n    set((state) => {\r\n      state.menuClicked = menuClicked;\r\n    }),\r\n  subMenuClicked: \"\",\r\n  setSubMenuClicked: (subMenuClicked) =>\r\n    set((state) => {\r\n      state.subMenuClicked = subMenuClicked;\r\n    }),\r\n\r\n  bread: [{ name: \"My Folder\", id: \"0fx6ef888f9bfcdb040bd9084653db3c65a8c\" }],\r\n  setRootBread: (id) =>\r\n    set((state) => {\r\n      state.bread = [{ name: \"Base Directory\", id: id }];\r\n    }),\r\n  setBreadCrumbs: (folder) =>\r\n    set((state) => {\r\n      state.bread = [].concat(state.bread, [\r\n        { name: folder?.attributes?.name, id: folder?.id },\r\n      ]);\r\n    }),\r\n  setBreadCrumbsUrl: (folder) =>\r\n    set((state) => {\r\n      let my_array = [];\r\n      for (let index = 0; index < state.bread.length; index++) {\r\n        const element = state.bread[index];\r\n        if (element.id != folder.id) my_array.push(element);\r\n        else {\r\n          my_array.push(element);\r\n          break;\r\n        }\r\n      }\r\n      state.bread = my_array;\r\n    }),\r\n  listView: true,\r\n  setListView: (bool) =>\r\n    set((state) => {\r\n      state.listView = bool;\r\n    }),\r\n  apiData: {},\r\n  setApiData: (folderId, data) =>\r\n    set((state) => {\r\n      state.apiData[folderId] = data;\r\n    }),\r\n  loading: true,\r\n  setLoading: (bool) =>\r\n    set((state) => {\r\n      state.loading = bool;\r\n    }),\r\n  id: \"\",\r\n  setId: (id) =>\r\n    set((state) => {\r\n      state.id = id;\r\n    }),\r\n  token: \"\",\r\n  setToken: (data) =>\r\n    set((state) => {\r\n      state.token = data;\r\n    }),\r\n  userToken: \"\",\r\n  setUserToken: (data) =>\r\n    set((state) => {\r\n      state.userToken = `Bearer ${data}`;\r\n    }),\r\n  settingData: {},\r\n  setInitializeData: (settings) => set((state)=>{\r\n    settings.map()\r\n  }),\r\n  setBreadCrumbsSettingData: (rootFolderId, folder) =>\r\n    set((state) => {\r\n      state.settingData = {\r\n        ...state.settingData,\r\n        rootFolderId: {\r\n          ...state.settingData?.[rootFolderId],\r\n          breadCrumbs: [].concat(\r\n            state.settingData?.[rootFolderId]?.breadCrumbs,\r\n            [{ name: folder?.attributes?.name, id: folder?.id }]\r\n          ),\r\n        },\r\n      };\r\n    }),\r\n});\r\n\r\nconst useStore = create(log(immer(store)));\r\nconst useTrackedStore = createTrackedSelector(useStore);\r\nexport default useTrackedStore;\r\n"]},"metadata":{},"sourceType":"module"}