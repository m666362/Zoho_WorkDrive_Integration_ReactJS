{"ast":null,"code":"import { produce, setAutoFreeze } from \"immer\";\nimport create from \"zustand\";\nimport { createTrackedSelector } from \"react-tracked\";\nimport { Menuitems } from \"../data/data.js\";\nimport { SettingsSharp } from \"@material-ui/icons\";\nsetAutoFreeze(false);\nexport const immer = config => (set, get) => config(fn => set(produce(fn)), get);\n\nconst log = config => (set, get, api) => config(args => {\n  set(args);\n}, get, api);\n\nconst store = set => ({\n  menuItems: Menuitems,\n  menuClicked: \"Dashboard\",\n  setMenuClicked: menuClicked => set(state => {\n    state.menuClicked = menuClicked;\n  }),\n  subMenuClicked: \"\",\n  setSubMenuClicked: subMenuClicked => set(state => {\n    state.subMenuClicked = subMenuClicked;\n  }),\n  bread: [{\n    name: \"My Folder\",\n    id: \"0fx6ef888f9bfcdb040bd9084653db3c65a8c\"\n  }],\n  setRootBread: id => set(state => {\n    state.bread = [{\n      name: \"Base Directory\",\n      id: id\n    }];\n  }),\n  setBreadCrumbs: folder => set(state => {\n    var _folder$attributes;\n\n    state.bread = [].concat(state.bread, [{\n      name: folder === null || folder === void 0 ? void 0 : (_folder$attributes = folder.attributes) === null || _folder$attributes === void 0 ? void 0 : _folder$attributes.name,\n      id: folder === null || folder === void 0 ? void 0 : folder.id\n    }]);\n  }),\n  setBreadCrumbsUrl: folder => set(state => {\n    let my_array = [];\n\n    for (let index = 0; index < state.bread.length; index++) {\n      const element = state.bread[index];\n      if (element.id != folder.id) my_array.push(element);else {\n        my_array.push(element);\n        break;\n      }\n    }\n\n    state.bread = my_array;\n  }),\n  listView: true,\n  setListView: bool => set(state => {\n    state.listView = bool;\n  }),\n  apiData: {},\n  setApiData: (folderId, data) => set(state => {\n    state.apiData[folderId] = data;\n  }),\n  loading: true,\n  setLoading: bool => set(state => {\n    state.loading = bool;\n  }),\n  id: \"\",\n  setId: id => set(state => {\n    state.id = id;\n  }),\n  token: \"\",\n  setToken: data => set(state => {\n    state.token = data;\n  }),\n  userToken: \"\",\n  setUserToken: data => set(state => {\n    state.userToken = `Bearer ${data}`;\n  }),\n  settingData: {},\n  setInitializeData: settings => set(state => {\n    let tempData = {};\n    settings.forEach(setting => {\n      tempData[setting === null || setting === void 0 ? void 0 : setting.settingId] = {\n        rootFolderId: setting === null || setting === void 0 ? void 0 : setting.rootFolderId,\n        name: setting === null || setting === void 0 ? void 0 : setting.Name,\n        userAccessToken: setting === null || setting === void 0 ? void 0 : setting.userAccessToken,\n        breadCrumbs: [],\n        previousData: {},\n        listView: true\n      };\n    });\n    state.settingData = tempData;\n    console.log({\n      tempData: state.settingData\n    });\n  }),\n  setApiSettingData: (settingId, folder, apiData) => set(state => {\n    var _folder$id, _state$settingData, _state$settingData2, _state$settingData2$s, _state$settingData3, _state$settingData3$s, _folder$attributes2;\n\n    let folderId = (_folder$id = folder === null || folder === void 0 ? void 0 : folder.id) !== null && _folder$id !== void 0 ? _folder$id : folder;\n    state.settingData = { ...state.settingData,\n      [settingId]: { ...((_state$settingData = state.settingData) === null || _state$settingData === void 0 ? void 0 : _state$settingData[settingId]),\n        previousData: { ...((_state$settingData2 = state.settingData) === null || _state$settingData2 === void 0 ? void 0 : (_state$settingData2$s = _state$settingData2[settingId]) === null || _state$settingData2$s === void 0 ? void 0 : _state$settingData2$s.previousData),\n          [folderId]: apiData\n        },\n        breadCrumbs: [].concat((_state$settingData3 = state.settingData) === null || _state$settingData3 === void 0 ? void 0 : (_state$settingData3$s = _state$settingData3[settingId]) === null || _state$settingData3$s === void 0 ? void 0 : _state$settingData3$s.breadCrumbs, [{\n          name: folder !== null && folder !== void 0 && (_folder$attributes2 = folder.attributes) !== null && _folder$attributes2 !== void 0 && _folder$attributes2.name ? folder.attributes.name : \"My Folder\",\n          id: folderId\n        }])\n      }\n    };\n    console.log({\n      apiSetsData: state.settingData\n    });\n  }),\n  setBreadCrumbsSettingData: (settingId, folder) => set(state => {\n    var _state$settingData6;\n\n    let my_array = [];\n\n    for (let i = 0; i < ((_state$settingData4 = state.settingData) === null || _state$settingData4 === void 0 ? void 0 : _state$settingData4[settingId].breadCrumbs.length) - 1; i++) {\n      var _state$settingData4, _state$settingData5, _state$settingData5$s;\n\n      const element = (_state$settingData5 = state.settingData) === null || _state$settingData5 === void 0 ? void 0 : (_state$settingData5$s = _state$settingData5[settingId].breadCrumbs) === null || _state$settingData5$s === void 0 ? void 0 : _state$settingData5$s[i];\n      if (element.id != folder.id) my_array.push(element);else {\n        my_array.push(element);\n        break;\n      }\n    }\n\n    state.settingData = { ...state.settingData,\n      [settingId]: { ...((_state$settingData6 = state.settingData) === null || _state$settingData6 === void 0 ? void 0 : _state$settingData6[settingId]),\n        breadCrumbs: my_array\n      }\n    };\n  }),\n  setViewSettingData: (settingId, bool) => set(state => {\n    var _state$settingData7;\n\n    console.log({\n      settingId,\n      bool\n    });\n    state.settingData = { ...state.settingData,\n      [settingId]: { ...((_state$settingData7 = state.settingData) === null || _state$settingData7 === void 0 ? void 0 : _state$settingData7[settingId]),\n        listView: bool\n      }\n    };\n  }),\n  setAddItemSettingData: (settingId, folder, apiData) => set(state => {\n    var _folder$id2, _state$settingData8, _state$settingData9, _state$settingData9$s;\n\n    let folderId = (_folder$id2 = folder === null || folder === void 0 ? void 0 : folder.id) !== null && _folder$id2 !== void 0 ? _folder$id2 : folder;\n    state.settingData = { ...state.settingData,\n      [settingId]: { ...((_state$settingData8 = state.settingData) === null || _state$settingData8 === void 0 ? void 0 : _state$settingData8[settingId]),\n        previousData: { ...((_state$settingData9 = state.settingData) === null || _state$settingData9 === void 0 ? void 0 : (_state$settingData9$s = _state$settingData9[settingId]) === null || _state$settingData9$s === void 0 ? void 0 : _state$settingData9$s.previousData),\n          [folderId]: apiData\n        }\n      }\n    };\n  })\n});\n\nconst useStore = create(log(immer(store)));\nconst useTrackedStore = createTrackedSelector(useStore);\nexport default useTrackedStore;","map":{"version":3,"sources":["D:/Rayhan/Unique Project/zoho_api_axios(1)/src/store/useTrackedStore.js"],"names":["produce","setAutoFreeze","create","createTrackedSelector","Menuitems","SettingsSharp","immer","config","set","get","fn","log","api","args","store","menuItems","menuClicked","setMenuClicked","state","subMenuClicked","setSubMenuClicked","bread","name","id","setRootBread","setBreadCrumbs","folder","concat","attributes","setBreadCrumbsUrl","my_array","index","length","element","push","listView","setListView","bool","apiData","setApiData","folderId","data","loading","setLoading","setId","token","setToken","userToken","setUserToken","settingData","setInitializeData","settings","tempData","forEach","setting","settingId","rootFolderId","Name","userAccessToken","breadCrumbs","previousData","console","setApiSettingData","apiSetsData","setBreadCrumbsSettingData","i","setViewSettingData","setAddItemSettingData","useStore","useTrackedStore"],"mappings":"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","sourcesContent":["import { produce, setAutoFreeze } from \"immer\";\r\nimport create from \"zustand\";\r\nimport { createTrackedSelector } from \"react-tracked\";\r\nimport { Menuitems } from \"../data/data.js\";\r\nimport { SettingsSharp } from \"@material-ui/icons\";\r\n\r\nsetAutoFreeze(false);\r\n\r\nexport const immer = (config) => (set, get) =>\r\n  config((fn) => set(produce(fn)), get);\r\n\r\nconst log = (config) => (set, get, api) =>\r\n  config(\r\n    (args) => {\r\n      set(args);\r\n    },\r\n    get,\r\n    api\r\n  );\r\n\r\nconst store = (set) => ({\r\n  menuItems: Menuitems,\r\n  menuClicked: \"Dashboard\",\r\n  setMenuClicked: (menuClicked) =>\r\n    set((state) => {\r\n      state.menuClicked = menuClicked;\r\n    }),\r\n  subMenuClicked: \"\",\r\n  setSubMenuClicked: (subMenuClicked) =>\r\n    set((state) => {\r\n      state.subMenuClicked = subMenuClicked;\r\n    }),\r\n\r\n  bread: [{ name: \"My Folder\", id: \"0fx6ef888f9bfcdb040bd9084653db3c65a8c\" }],\r\n  setRootBread: (id) =>\r\n    set((state) => {\r\n      state.bread = [{ name: \"Base Directory\", id: id }];\r\n    }),\r\n  setBreadCrumbs: (folder) =>\r\n    set((state) => {\r\n      state.bread = [].concat(state.bread, [\r\n        { name: folder?.attributes?.name, id: folder?.id },\r\n      ]);\r\n    }),\r\n  setBreadCrumbsUrl: (folder) =>\r\n    set((state) => {\r\n      let my_array = [];\r\n      for (let index = 0; index < state.bread.length; index++) {\r\n        const element = state.bread[index];\r\n        if (element.id != folder.id) my_array.push(element);\r\n        else {\r\n          my_array.push(element);\r\n          break;\r\n        }\r\n      }\r\n      state.bread = my_array;\r\n    }),\r\n  listView: true,\r\n  setListView: (bool) =>\r\n    set((state) => {\r\n      state.listView = bool;\r\n    }),\r\n  apiData: {},\r\n  setApiData: (folderId, data) =>\r\n    set((state) => {\r\n      state.apiData[folderId] = data;\r\n    }),\r\n  loading: true,\r\n  setLoading: (bool) =>\r\n    set((state) => {\r\n      state.loading = bool;\r\n    }),\r\n  id: \"\",\r\n  setId: (id) =>\r\n    set((state) => {\r\n      state.id = id;\r\n    }),\r\n  token: \"\",\r\n  setToken: (data) =>\r\n    set((state) => {\r\n      state.token = data;\r\n    }),\r\n  userToken: \"\",\r\n  setUserToken: (data) =>\r\n    set((state) => {\r\n      state.userToken = `Bearer ${data}`;\r\n    }),\r\n  settingData: {},\r\n  setInitializeData: (settings) =>\r\n    set((state) => {\r\n      let tempData = {};\r\n      settings.forEach((setting) => {\r\n        tempData[setting?.settingId] = {\r\n          rootFolderId: setting?.rootFolderId,\r\n          name: setting?.Name,\r\n          userAccessToken: setting?.userAccessToken,\r\n          breadCrumbs: [],\r\n          previousData: {},\r\n          listView: true,\r\n        };\r\n      });\r\n      state.settingData = tempData;\r\n      console.log({ tempData: state.settingData });\r\n    }),\r\n  setApiSettingData: (settingId, folder, apiData) =>\r\n    set((state) => {\r\n      let folderId = folder?.id ?? folder;\r\n      state.settingData = {\r\n        ...state.settingData,\r\n        [settingId]: {\r\n          ...state.settingData?.[settingId],\r\n          previousData: {\r\n            ...state.settingData?.[settingId]?.previousData,\r\n            [folderId]: apiData,\r\n          },\r\n          breadCrumbs: [].concat(state.settingData?.[settingId]?.breadCrumbs, [\r\n            {\r\n              name: folder?.attributes?.name\r\n                ? folder.attributes.name\r\n                : \"My Folder\",\r\n              id: folderId,\r\n            },\r\n          ]),\r\n        },\r\n      };\r\n\r\n      console.log({ apiSetsData: state.settingData });\r\n    }),\r\n  setBreadCrumbsSettingData: (settingId, folder) =>\r\n    set((state) => {\r\n      let my_array = [];\r\n      for (\r\n        let i = 0;\r\n        i < state.settingData?.[settingId].breadCrumbs.length - 1;\r\n        i++\r\n      ) {\r\n        const element = state.settingData?.[settingId].breadCrumbs?.[i];\r\n        if (element.id != folder.id) my_array.push(element);\r\n        else {\r\n          my_array.push(element);\r\n          break;\r\n        }\r\n      }\r\n      state.settingData = {\r\n        ...state.settingData,\r\n        [settingId]: {\r\n          ...state.settingData?.[settingId],\r\n          breadCrumbs: my_array,\r\n        },\r\n      };\r\n    }),\r\n  setViewSettingData: (settingId, bool) =>\r\n    set((state) => {\r\n      console.log({\r\n        settingId,\r\n        bool,\r\n      });\r\n      state.settingData = {\r\n        ...state.settingData,\r\n        [settingId]: {\r\n          ...state.settingData?.[settingId],\r\n          listView: bool,\r\n        },\r\n      };\r\n    }),\r\n  setAddItemSettingData: (settingId, folder, apiData) =>\r\n    set((state) => {\r\n      let folderId = folder?.id ?? folder;\r\n      state.settingData = {\r\n        ...state.settingData,\r\n        [settingId]: {\r\n          ...state.settingData?.[settingId],\r\n          previousData: {\r\n            ...state.settingData?.[settingId]?.previousData,\r\n            [folderId]: apiData,\r\n          },\r\n        },\r\n      };\r\n    }),\r\n});\r\n\r\nconst useStore = create(log(immer(store)));\r\nconst useTrackedStore = createTrackedSelector(useStore);\r\nexport default useTrackedStore;\r\n"]},"metadata":{},"sourceType":"module"}